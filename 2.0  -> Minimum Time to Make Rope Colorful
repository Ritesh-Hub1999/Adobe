https://leetcode.com/problems/minimum-time-to-make-rope-colorful/description/

Example 1:
----------
Input: colors = "abaac", neededTime = [1,2,3,4,5]
Output: 3
Explanation: In the above image, 'a' is blue, 'b' is red, and 'c' is green.
Bob can remove the blue balloon at index 2. This takes 3 seconds.
There are no longer two consecutive balloons of the same color. Total time = 3.

Example 2:
----------
Input: colors = "abc", neededTime = [1,2,3]
Output: 0
Explanation: The rope is already colorful. Bob does not need to remove any balloons from the rope.

Example 3:
---------
Input: colors = "aabaa", neededTime = [1,2,3,4,1]
Output: 2
Explanation: Bob will remove the ballons at indices 0 and 4. Each ballon takes 1 second to remove.
There are no longer two consecutive balloons of the same color. Total time = 1 + 1 = 2.

Approch:
-------
Here we gonna use the two pointer approch.
step 1: taken char as to compare with the prev char.
        for having a prev index track islia prevCh index rakha.
        
step 2: if char match:             2 checks
                                    /\
                                   /  \
                                  /    \
        if(prevCh < neededTime[i])      else
            because hum yaha min         prev index bara raah gaya tho
            track rha hai time track     chota index ko add kar dega ans mai
            kar rha. so min index ko
            hatainga karenga
                                   
                         

        if char not match : so, char mai 'ch' ko update kar do
                                     &
                            'prevCh' ka index ko bhi update kr do

Code:
-----
    int minCost(string colors, vector<int>& neededTime) {
        int ans = 0;
        char ch = '-';
        int prevCh = 0;

        for(int i = 0;i < colors.length();i++){
            if(ch == colors[i]){
                if(prevCh < neededTime[i]){
                    ans = ans + prevCh;
                    prevCh = neededTime[i];
                }
                else{
                   ans = ans + neededTime[i]; 
                }
            }
            else{
                ch = colors[i];
                prevCh = neededTime[i];
            }
        }

        return ans;
    }
